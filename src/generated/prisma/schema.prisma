// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              BigInt   @id @default(autoincrement()) @map("id")
  nickname        String   @map("nickname") @db.VarChar(100)
  name            String   @map("name") @db.VarChar(10)
  email           String   @map("email") @db.VarChar(50)
  password        String   @map("password") @db.VarChar(100)
  profileImageUrl String?  @map("profile_image_url") @db.VarChar(1000)
  gender          String   @map("gender") @db.VarChar(2) // Enum을 String으로 수정
  birth           DateTime @map("birth") @db.Date
  phoneNumber     String   @map("phone_number") @db.VarChar(20)
  point           Int      @default(0) @map("point")
  createdAt       DateTime @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.DateTime(6)

  ranking           Ranking[]
  userItems         UserItem[]
  roomParticipants  RoomParticipant[]
  questCompletions  QuestCompletion[]
  pointTransactions PointTransaction[]

  @@map("user")
}

model Ranking {
  id           BigInt   @id @default(autoincrement()) @map("id")
  userId       BigInt   @map("user_id")
  rank         Int      @map("rank")
  previousRank Int?     @map("previous_rank")
  tier         String   @map("tier") @db.VarChar(20) // Enum을 String으로 수정
  totalPoints  Int      @map("total_points")
  createdAt    DateTime @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.DateTime(6)

  user User @relation(fields: [userId], references: [id])

  @@map("ranking")
}

model Quest {
  id          BigInt   @id @default(autoincrement()) @map("id")
  name        String   @map("name") @db.VarChar(100)
  description String?  @map("description") @db.Text
  type        String?  @map("type") @db.VarChar(20) // Enum을 String으로 수정
  rewardPts   Int      @map("reward_pts")
  createdAt   DateTime @default(now()) @map("created_at") @db.DateTime(6)

  questCompletions QuestCompletion[]

  @@map("quests")
}

model RoomParticipant {
  id       BigInt    @id @default(autoincrement()) @map("id")
  userId   BigInt    @map("user_id")
  roomId   BigInt    @map("room_id")
  role     String    @map("role") @db.VarChar(20) // Enum을 String으로 수정
  joinedAt DateTime  @map("joined_at") @db.DateTime(6)
  endAt    DateTime? @map("end_at") @db.DateTime(6)

  user       User       @relation(fields: [userId], references: [id])
  battleRoom BattleRoom @relation(fields: [roomId], references: [id])

  @@map("room_participants")
}

model AiJudgement {
  id         BigInt   @id @default(autoincrement()) @map("id")
  roomId     BigInt   @map("room_id")
  confidence Decimal  @map("confidence") @db.Decimal(5, 2)
  details    String   @map("details") @db.Text
  createdAt  DateTime @default(now()) @map("created_at") @db.DateTime(6)

  battleRoom BattleRoom @relation(fields: [roomId], references: [id])

  @@map("ai_judgements")
}

model AiSummary {
  id        BigInt   @id @default(autoincrement()) @map("id")
  roomId    BigInt   @map("room_id")
  summary   String   @map("summary") @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)

  battleRoom BattleRoom @relation(fields: [roomId], references: [id])

  @@map("ai_summaries")
}

model UserItem {
  id         BigInt   @id @default(autoincrement()) @map("id")
  userId     BigInt   @map("user_id")
  itemId     BigInt   @map("item_id")
  acquiredAt DateTime @default(now()) @map("acquired_at") @db.DateTime(6)
  isEquipped Boolean  @default(false) @map("is_equipped")

  user User @relation(fields: [userId], references: [id])
  item Item @relation(fields: [itemId], references: [id])

  @@map("user_items")
}

model Item {
  id        BigInt   @id @default(autoincrement()) @map("id")
  name      String   @map("name") @db.VarChar(100)
  context   String?  @map("context") @db.Text
  cost      Int      @map("cost")
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)

  userItems UserItem[]

  @@map("items")
}

model BattleRoom {
  id          BigInt    @id @default(autoincrement()) @map("id")
  admin       BigInt    @map("admin")
  title       String    @map("title") @db.VarChar(100)
  status      String    @map("status") @db.VarChar(20) // Enum을 String으로 수정
  createdAt   DateTime  @default(now()) @map("created_at") @db.DateTime(6)
  endedAt     DateTime? @map("ended_at") @db.DateTime(6)
  approvalNum Int       @default(0) @map("approval_num")
  oppositeNum Int       @default(0) @map("opposite_num")

  battleTitle      BattleTitle[]
  roomParticipants RoomParticipant[]
  aiSummaries      AiSummary[] // 추가됨
  aiJudgements     AiJudgement[]

  @@map("battle_room")
}

model BattleTitle {
  id          BigInt   @id @default(autoincrement()) @map("id")
  roomId      BigInt   @map("room_id")
  title       String   @map("title") @db.Text
  suggestedBy String   @default("user") @map("suggested_by") @db.VarChar(20) // Enum을 String으로 수정
  createdAt   DateTime @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.DateTime(6)

  battleRoom BattleRoom @relation(fields: [roomId], references: [id])

  @@map("battle_title")
}

model QuestCompletion {
  id          BigInt    @id @default(autoincrement()) @map("id")
  userId      BigInt    @map("user_id")
  questId     BigInt    @map("quest_id")
  isCompleted Boolean   @default(false) @map("is_completed")
  completedAt DateTime? @map("completed_at") @db.DateTime(6)

  user  User  @relation(fields: [userId], references: [id])
  quest Quest @relation(fields: [questId], references: [id])

  @@map("quest_completion")
}

model PointTransaction {
  id        BigInt   @id @default(autoincrement()) @map("id")
  userId    BigInt   @map("user_id")
  change    Int      @map("change")
  reason    String   @map("reason") @db.VarChar(50) // Enum을 String으로 수정
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)

  user User @relation(fields: [userId], references: [id])

  @@map("point_transcations")
}
